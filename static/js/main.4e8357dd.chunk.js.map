{"version":3,"sources":["reducers/calcReducer.ts","components/screen.tsx","components/keypad.tsx","App.tsx","mappers/calcMappers.ts","serviceWorker.js","index.js"],"names":["initialState","value","keys","calcReducer","state","arguments","length","undefined","action","type","Object","C_Users_s2_kudryavtsev_Documents_calculator_react_redux_typescript_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","text","eval","Screen","_ref","react_default","a","createElement","className","Keypad","_Component","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","inherits","createClass","key","_this","_this$props","props","addElem","clear","showResult","map","item","onClick","bind","Component","App","screen_Screen","keypad_Keypad","Calc","connect","dispatch","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","es","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oaASMA,aAA2B,CAC7BC,MAAO,IACPC,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAGzEC,YAA2B,SAA3BA,cAA0E,IAA9CC,MAA8CC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtCL,aAAcQ,OAAwBH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACnF,OAAQC,OAAOC,MACX,IAAK,yBACD,OAAOC,OAAAC,wLAAA,EAAAD,CAAA,GACAN,MADP,CAEIH,MAAuB,MAAhBG,MAAMH,MAAgBO,OAAOI,KAAOR,MAAMH,MAAQO,OAAOI,OAExE,IAAK,QACD,OAAOF,OAAAC,wLAAA,EAAAD,CAAA,GACAN,MADP,CAEIH,MAAO,MAEf,IAAK,cACD,OAAOS,OAAAC,wLAAA,EAAAD,CAAA,GACAN,MADP,CAGIH,MAAOY,KAAKL,OAAOP,SAE3B,QACI,OAAOG,4NC3BNU,SAA4B,SAAAC,GAA0B,IAAxBd,EAAwBc,EAAxBd,MACvC,OACIe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,SAAOT,KAAK,OAAOR,MAAOA,OCLvBmB,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAV,OAAAY,EAAA,EAAAZ,CAAAa,KAAAH,GAAAV,OAAAc,EAAA,EAAAd,CAAAa,KAAAb,OAAAe,EAAA,EAAAf,CAAAU,GAAAM,MAAAH,KAAAlB,YAAA,OAAAK,OAAAiB,EAAA,EAAAjB,CAAAU,EAAAC,GAAAX,OAAAkB,EAAA,EAAAlB,CAAAU,EAAA,EAAAS,IAAA,SAAA5B,MAAA,WAC8B,IAAA6B,EAAAP,KAAAQ,EAC8BR,KAAKS,MAAjD/B,EADc8B,EACd9B,MAAOC,EADO6B,EACP7B,KAAM+B,EADCF,EACDE,QAASC,EADRH,EACQG,MAAOC,EADfJ,EACeI,WACrC,OACInB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACVjB,EAAKkC,IAAI,SAACC,GACP,OAAQA,GACJ,IAAK,IACD,OAAQrB,EAAAC,EAAAC,cAAA,UAAQoB,QAASJ,EAAOL,IAAKQ,GAAOA,GAChD,IAAK,IACD,OAAQrB,EAAAC,EAAAC,cAAA,UAAQoB,QAASH,EAAWI,KAAKT,EAAM7B,GAAQ4B,IAAKQ,GAAOA,GACvE,QACI,OAAQrB,EAAAC,EAAAC,cAAA,UAAQoB,QAASL,EAAQM,KAAKT,EAAMO,GAAOR,IAAKQ,GAAOA,WAZ3FjB,EAAA,CAA4BoB,aCMtBC,mLACsB,IAAAV,EAC4BR,KAAKS,MAAjD/B,EADgB8B,EAChB9B,MAAOC,EADS6B,EACT7B,KAAM+B,EADGF,EACHE,QAASC,EADNH,EACMG,MAAOC,EADbJ,EACaI,WAErC,OACEnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACwB,EAAD,CAAQzC,MAAOA,IACfe,EAAAC,EAAAC,cAACyB,EAAD,CAAQzC,KAAMA,EAAMD,MAAOA,EAAOiC,MAAOA,EAAOC,WAAYA,EAAYF,QAASA,YAPvEO,aAaLI,EAAWC,YCrB0C,SAAAzC,GAC9D,MAAO,CACHH,MAAOG,EAAMH,MACbC,KAAME,EAAMF,OAMsC,SAAC4C,GACvD,MAAO,CACHb,QAAS,SAACrB,GACNkC,EAAS,CACLrC,KAAM,yBACNG,UAIRsB,MAAO,WACHY,EAAS,CACLrC,KAAM,WAId0B,WAAY,SAAClC,GACT6C,EAAS,CACLrC,KAAM,cACNR,aDNQ4C,CAGtBJ,WEdkBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRN,IAAMC,EAAQC,YAAYlD,KAE1BmD,IAASC,OACLvC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAUJ,MAAOA,GACZpC,EAAAC,EAAAC,cAAC0B,EAAD,OACQa,SAASC,eAAe,SDkHnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4e8357dd.chunk.js","sourcesContent":["import { ICalcState } from \"../common/interfaces\";\r\n\r\ninterface ICalcAction {\r\n    type: string;\r\n    [payload: string]: string;\r\n}\r\n\r\ntype CalcReducer = (state: ICalcState | undefined, action: ICalcAction) => ICalcState;\r\n\r\nconst initialState: ICalcState = {\r\n    value: \"0\",\r\n    keys: [\"7\", \"8\", \"9\", \"-\", \"4\", \"5\", \"6\", \"/\", \"1\", \"2\", \"3\", \"*\", \"0\", \"C\", \"=\", \"+\"],\r\n};\r\n\r\nexport const calcReducer: CalcReducer = (state = initialState, action: ICalcAction) => {\r\n    switch (action.type) {\r\n        case \"ADD_DIGIT_OR_OPERATION\":\r\n            return {\r\n                ...state,\r\n                value: state.value === \"0\" ? action.text : state.value + action.text,\r\n            };\r\n        case \"CLEAR\":\r\n            return {\r\n                ...state,\r\n                value: \"0\",\r\n            };\r\n        case \"SHOW_RESULT\":\r\n            return {\r\n                ...state,\r\n                /* tslint:disable-next-line */\r\n                value: eval(action.value),\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};","import React from \"react\";\r\n\r\ninterface IScreen {\r\n    value: string;\r\n}\r\n\r\nexport const Screen: React.FC<IScreen> = ({value}): JSX.Element => {\r\n    return (\r\n        <div className=\"screen-container\">\r\n          <input type=\"text\" value={value} />\r\n        </div>\r\n    );\r\n};","import React, { Component } from \"react\";\r\n\r\nimport { ICalcProps } from \"../common/interfaces\";\r\n\r\nexport class Keypad extends Component<ICalcProps> {\r\n    render(): React.ReactNode {\r\n        const { value, keys, addElem, clear, showResult } = this.props;\r\n        return (\r\n            <div className=\"buttons-container\">\r\n                {keys.map((item: string) => {\r\n                    switch (item) {\r\n                        case \"C\":\r\n                            return (<button onClick={clear} key={item}>{item}</button>);\r\n                        case \"=\":\r\n                            return (<button onClick={showResult.bind(this, value)} key={item}>{item}</button>);\r\n                        default:\r\n                            return (<button onClick={addElem.bind(this, item)} key={item}>{item}</button>);\r\n                    }\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport \"./App.css\";\r\nimport { ICalcProps } from \"./common/interfaces\";\r\nimport { Screen } from \"./components/screen\";\r\nimport { Keypad } from \"./components/keypad\";\r\nimport { mapStateToProps, mapDispatchToProps } from \"./mappers/calcMappers\";\r\n\r\n\r\nclass App extends Component<ICalcProps> {\r\n  render(): React.ReactNode {\r\n    const { value, keys, addElem, clear, showResult } = this.props;\r\n\r\n    return (\r\n      <div className=\"calc-body\">\r\n        <Screen value={value} />\r\n        <Keypad keys={keys} value={value} clear={clear} showResult={showResult} addElem={addElem}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport const Calc: {} = connect( // what FUCKING type is Calc???\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App);\r\n","import { ICalcState, IMapDispatchToProps } from \"../common/interfaces\";\r\n\r\nexport const mapStateToProps: (state: ICalcState) => ICalcState = state => {\r\n    return {\r\n        value: state.value,\r\n        keys: state.keys,\r\n    };\r\n};\r\n\r\ntype MapDispatchToPropsType = (dispatch: any) => IMapDispatchToProps; // what FUCKING type is dispatch???\r\n\r\nexport const mapDispatchToProps: MapDispatchToPropsType = (dispatch) => {\r\n    return {\r\n        addElem: (text: string) => {\r\n            dispatch({\r\n                type: \"ADD_DIGIT_OR_OPERATION\",\r\n                text,\r\n            });\r\n        },\r\n\r\n        clear: () => {\r\n            dispatch({\r\n                type: \"CLEAR\"\r\n            });\r\n        },\r\n\r\n        showResult: (value: string) => {\r\n            dispatch({\r\n                type: \"SHOW_RESULT\",\r\n                value,\r\n            });\r\n        }\r\n    };\r\n};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore } from \"redux\";\r\n\r\nimport \"./index.css\";\r\nimport { Calc } from \"./App\";\r\nimport { calcReducer } from \"./reducers/calcReducer\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nconst store = createStore(calcReducer);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        {<Calc />}\r\n    </Provider>, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}